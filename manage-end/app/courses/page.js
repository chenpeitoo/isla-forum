'use client'

import React, { useState, useMemo, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import {
  useReactTable,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  flexRender,
} from '@tanstack/react-table'

import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu'

import {
  Search,
  MoreHorizontal,
  Edit2,
  Trash2,
  Plus,
  Eye,
  ArrowUpDown,
  ArrowUp,
  ArrowDown,
  ChevronLeft,
  ChevronRight,
} from 'lucide-react'
import Image from 'next/image'
import { Badge } from '@/components/ui/badge'
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from '@/components/ui/dialog'
import DOMPurify from 'dompurify'
import '@/app/courses/_components/course-prose.scss'

export default function CourseListPage() {
  const [data, setData] = useState([])
  const [globalFilter, setGlobalFilter] = useState('')
  const router = useRouter()
  const [selectedCourse, setSelectedCourse] = useState(null)
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)

  useEffect(() => {
    async function fetchCourses() {
      setIsLoading(true)
      setError(null)
      try {
        const res = await fetch(
          'http://localhost:3005/api/courses-manage/course-list'
        )
        const json = await res.json()
        if (json.status === 'success') {
          setData(json.data)
        } else {
          throw new Error(json.message || 'ÂèñÂæóË≥áÊñôÂ§±Êïó')
        }
      } catch (error) {
        console.error('Ë™≤Á®ãË≥áÊñôÂèñÂæóÂ§±Êïó', error)
        setError(error.message || 'Ë≥áÊñôËºâÂÖ•ÈåØË™§')
      } finally {
        setIsLoading(false)
      }
    }

    fetchCourses()
  }, [])

  const handleEdit = (id) => {
    router.push(`/courses/edit/${id}`)
  }

  const handleDelete = async (id) => {
    if (!confirm('Á¢∫ÂÆöË¶ÅÂà™Èô§ÈÄôÂ†ÇË™≤Á®ãÂóéÔºü')) return

    try {
      const res = await fetch(
        `http://localhost:3005/api/courses-manage/course-list/${id}/delete`,
        {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json',
          },
        }
      )
      const result = await res.json()
      console.log('Âà™Èô§ÂõûÊáâ', result)
      if (result.status === 'success') {
        // Êõ¥Êñ∞Áï´Èù¢Ë≥áÊñô
        setData((prev) =>
          prev.map((course) =>
            course.id === id
              ? {
                  ...course,
                  status: 0,
                  remove: result.data.remove, // ‚¨ÖÔ∏è ÂæåÁ´ØË¶ÅË®òÂæóÂõûÂÇ≥ remove ÊôÇÈñìÊà≥
                  updated: new Date().toISOString(),
                }
              : course
          )
        )
        if (selectedCourse?.id === id) {
          setSelectedCourse((prev) =>
            prev ? { ...prev, status: 0, remove: result.data.remove } : prev
          )
        }
      } else {
        alert(result.message || 'Âà™Èô§Â§±Êïó')
      }
    } catch (err) {
      console.error(err)
      alert('‰º∫ÊúçÂô®ÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶')
    }
  }

  const columns = useMemo(
    () => [
      {
        accessorKey: 'id',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="hover:bg-transparent p-0 font-medium text-left w-12" // ‚¨ÖÔ∏è Âõ∫ÂÆöÂØ¨Â∫¶
          >
            ID
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => <div className="w-12">{row.original.id}</div>, // Á¢∫‰øùÊ¨Ñ‰ΩçÂØ¨Â∫¶‰∏ÄËá¥
      },
      {
        accessorKey: 'picture',
        header: 'Ë™≤Á®ãÂúñÁâá',
        cell: ({ row }) => (
          <div className="relative h-[80px] w-[120px]">
            <Image
              src={`/images/course/bannerall/${row.original.picture}`}
              alt={row.original.title || 'course image'}
              fill
              className="object-contain rounded-md"
            />
          </div>
        ),
      },

      {
        accessorKey: 'title',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="p-0"
          >
            Ë™≤Á®ãÂêçÁ®±
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => (
          <div className="font-medium text-left">{row.original.title}</div>
        ),
      },
      {
        accessorKey: 'category_name',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="p-0"
          >
            ÂàÜÈ°û
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => <div>{row.original.category_name}</div>,
      },
      {
        accessorKey: 'teacher_name',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="p-0"
          >
            Ë¨õÂ∏´
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => <div>{row.original.teacher_name}</div>,
      },
      {
        accessorKey: 'discount',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="hover:bg-transparent p-0 font-medium text-left"
          >
            ÂîÆÂÉπ
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => (
          <div className="font-medium">
            NT$ {row.original.discount?.toLocaleString?.() ?? '‚Äî'}
          </div>
        ),
      },
      {
        accessorKey: 'student',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="hover:bg-transparent p-0 font-medium text-center"
          >
            Â≠∏Áîü‰∫∫Êï∏
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => (
          <div className="font-medium">
            {row.original.student.toLocaleString()}
          </div>
        ),
      },
      {
        accessorKey: 'status',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="p-0"
          >
            ÁãÄÊÖã
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => {
          const [isActive, setIsActive] = useState(row.original.status === 1)
          const [loading, setLoading] = useState(false)

          const toggleStatus = async () => {
            setLoading(true)
            try {
              const res = await fetch(
                `http://localhost:3005/api/courses-manage/course-list/${row.original.id}/toggle-status`,
                {
                  method: 'PATCH',
                  headers: { 'Content-Type': 'application/json' },
                }
              )
              const result = await res.json()
              if (result.status === 'success') {
                const updatedCourse = {
                  ...row.original,
                  status: result.data.status,
                  remove: result.data.remove, // üëà ÊääÂæåÁ´ØÁöÑ remove Êó•Êúü‰∏ÄËµ∑Êõ¥Êñ∞ÈÄ≤‰æÜ
                  updated: result.data.updated,
                }
                // ‚úÖ 1. Êõ¥Êñ∞Ë°®Ê†ºÁãÄÊÖã
                setIsActive(result.data.status === 1)

                // ‚úÖ 2. Êõ¥Êñ∞‰∏ªÂàóË°®ÁöÑË≥áÊñô
                setData((prevData) =>
                  prevData.map((course) =>
                    course.id === updatedCourse.id ? updatedCourse : course
                  )
                )

                // ‚úÖ 3. Ëã•ÁõÆÂâçÊ≠£Âú®Ê™¢Ë¶ñÈÄôÂ†ÇË™≤ÔºåÂ∞±Êõ¥Êñ∞ Dialog ÁöÑË≥áÊñô
                setSelectedCourse((prev) =>
                  prev?.id === updatedCourse.id ? updatedCourse : prev
                )
              } else {
                alert(result.message || 'ÂàáÊèõÂ§±Êïó')
              }
            } catch (err) {
              console.error(err)
              alert('‰º∫ÊúçÂô®ÈåØË™§')
            } finally {
              setLoading(false)
            }
          }

          return (
            <div className="flex flex-col items-center">
              <button
                onClick={toggleStatus}
                disabled={loading}
                className={`text-sm px-2 py-1 rounded-full transition-all duration-200 ${
                  isActive
                    ? 'bg-green-100 text-green-800 hover:bg-green-200'
                    : 'bg-red-100 text-red-800 hover:bg-red-200'
                }`}
              >
                {loading ? 'Êõ¥Êñ∞‰∏≠...' : isActive ? '‰∏äÊû∂‰∏≠' : 'Â∑≤‰∏ãÊû∂'}
              </button>

              {!isActive && row.original.remove && (
                <div className="text-xs text-gray-500 mt-1">
                  ‰∏ãÊû∂Êñº{' '}
                  {new Date(row.original.remove).toLocaleDateString('zh-TW')}
                </div>
              )}
            </div>
          )
        },
      },
      {
        accessorKey: 'created',
        header: ({ column }) => (
          <Button
            variant="ghost"
            onClick={() => column.toggleSorting(column.getIsSorted() === 'asc')}
            className="p-0"
          >
            Âª∫Á´ãÊó•Êúü
            {column.getIsSorted() === 'asc' ? (
              <ArrowUp className="ml-2 h-4 w-4" />
            ) : column.getIsSorted() === 'desc' ? (
              <ArrowDown className="ml-2 h-4 w-4" />
            ) : (
              <ArrowUpDown className="ml-2 h-4 w-4" />
            )}
          </Button>
        ),
        cell: ({ row }) => {
          const dateOnly = row.original.created?.slice(0, 10) || ''
          return <div className="text-sm text-gray-500">{dateOnly}</div>
        },
      },
      {
        id: 'actions',
        header: 'Êìç‰Ωú',
        cell: ({ row }) => (
          <>
            <DropdownMenu>
              <DropdownMenuTrigger asChild>
                <Button variant="ghost" className="h-8 w-8 p-0">
                  <MoreHorizontal className="h-4 w-4" />
                </Button>
              </DropdownMenuTrigger>
              <DropdownMenuContent align="end">
                <DropdownMenuItem
                  onClick={() => setSelectedCourse(row.original)}
                >
                  <Eye className="mr-2 h-4 w-4" />
                  Êü•ÁúãË©≥ÊÉÖ
                </DropdownMenuItem>
                <DropdownMenuItem onClick={() => handleEdit(row.original.id)}>
                  <Edit2 className="mr-2 h-4 w-4" />
                  Á∑®ËºØË™≤Á®ã
                </DropdownMenuItem>
                <DropdownMenuItem
                  onClick={() => handleDelete(row.original.id)}
                  className="text-red-600"
                >
                  <Trash2 className="mr-2 h-4 w-4" />
                  Âà™Èô§Ë™≤Á®ã
                </DropdownMenuItem>
              </DropdownMenuContent>
            </DropdownMenu>
          </>
        ),
      },
    ],
    [router, data]
  )

  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getFilteredRowModel: getFilteredRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    globalFilterFn: 'includesString',
    state: { globalFilter },
    onGlobalFilterChange: setGlobalFilter,
    initialState: {
      pagination: { pageSize: 10 },
      sorting: [
        { id: 'created', desc: false }, // ‚ùóÈ†êË®≠Áî® created Ê¨ÑÔºåÂçáÂÜ™ÊéíÂ∫è
      ],
    },
  })

  return (
    <div className="container mx-auto py-8 px-4">
      <Card>
        <CardHeader>
          <div className="flex items-center justify-between">
            <CardTitle className="text-2xl font-bold">Ë™≤Á®ãÁÆ°ÁêÜ</CardTitle>
            <Button
              onClick={() => router.push('/courses/add')}
              className="bg-blue-600 hover:bg-blue-700"
            >
              <Plus className="mr-2 h-4 w-4" />
              Êñ∞Â¢ûË™≤Á®ã
            </Button>
          </div>
        </CardHeader>
        <CardContent>
          {isLoading && (
            <div className="text-center text-gray-500 py-10">ËºâÂÖ•‰∏≠...</div>
          )}
          {error && (
            <div className="text-center text-red-500 py-10">
              ÁôºÁîüÈåØË™§Ôºö{error}
            </div>
          )}

          <div className="flex items-center space-x-2 mb-6">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4" />
              <Input
                placeholder="ÊêúÂ∞ãË™≤Á®ãÂêçÁ®±„ÄÅÂàÜÈ°û„ÄÅË¨õÂ∏´..."
                value={globalFilter}
                onChange={(e) => setGlobalFilter(e.target.value)}
                className="pl-10"
              />
            </div>
          </div>

          <div className="border rounded-lg overflow-hidden">
            <div className="overflow-x-auto">
              <table className="w-full min-w-[800px]">
                <thead className="bg-gray-50">
                  {table.getHeaderGroups().map((headerGroup) => (
                    <tr key={headerGroup.id}>
                      {headerGroup.headers.map((header) => (
                        <th
                          key={header.id}
                          className="px-4 py-3 text-center text-xs font-medium text-gray-500 uppercase"
                        >
                          {header.isPlaceholder
                            ? null
                            : flexRender(
                                header.column.columnDef.header,
                                header.getContext()
                              )}
                        </th>
                      ))}
                    </tr>
                  ))}
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {table.getRowModel().rows.length > 0 ? (
                    table.getRowModel().rows.map((row) => (
                      <tr key={row.id} className="hover:bg-gray-50">
                        {row.getVisibleCells().map((cell) => (
                          <td
                            key={cell.id}
                            className="px-4 py-3 text-sm text-center text-gray-700 whitespace-nowrap"
                          >
                            {flexRender(
                              cell.column.columnDef.cell,
                              cell.getContext()
                            )}
                          </td>
                        ))}
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td
                        colSpan={columns.length}
                        className="px-6 py-10 text-center text-gray-500"
                      >
                        Â∞öÁÑ°Ë™≤Á®ãË≥áÊñô
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>

          <div className="flex items-center justify-between mt-6">
            <div className="text-sm text-gray-700">
              È°ØÁ§∫{' '}
              {table.getRowModel().rows.length > 0
                ? table.getState().pagination.pageIndex *
                    table.getState().pagination.pageSize +
                  1
                : 0}{' '}
              Âà∞{' '}
              {Math.min(
                (table.getState().pagination.pageIndex + 1) *
                  table.getState().pagination.pageSize,
                table.getFilteredRowModel().rows.length
              )}{' '}
              Á≠ÜÔºåÂÖ± {table.getFilteredRowModel().rows.length} Á≠ÜË≥áÊñô
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => table.previousPage()}
                disabled={!table.getCanPreviousPage()}
              >
                <ChevronLeft className="h-4 w-4 mr-1" /> ‰∏ä‰∏ÄÈ†Å
              </Button>
              <span className="text-sm">
                Á¨¨ {table.getState().pagination.pageIndex + 1} /{' '}
                {table.getPageCount() || 1} È†Å
              </span>
              <Button
                variant="outline"
                size="sm"
                onClick={() => table.nextPage()}
                disabled={!table.getCanNextPage()}
              >
                ‰∏ã‰∏ÄÈ†Å <ChevronRight className="h-4 w-4 ml-1" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
      {selectedCourse && !isLoading && !error && (
        <Dialog
          open={!!selectedCourse}
          onOpenChange={() => setSelectedCourse(null)}
        >
          <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>{selectedCourse.title}</DialogTitle>
            </DialogHeader>
            <div className="space-y-4 mt-4 text-sm">
              <div className="flex justify-center">
                <Image
                  src={`/images/course/bannerall/${selectedCourse.picture}`}
                  alt={selectedCourse.title || 'Ë™≤Á®ãÂúñÁâá'}
                  width={450}
                  height={240}
                  className="rounded-md object-contain"
                />
              </div>
              {selectedCourse.banner_video?.endsWith('.mp4') && (
                <div className="flex justify-center">
                  <video
                    className="rounded-md max-w-full max-h-[360px]"
                    controls
                    preload="metadata"
                  >
                    <source
                      src={`/images/course/bannerall/${selectedCourse.banner_video}`}
                      type="video/mp4"
                    />
                    ÊÇ®ÁöÑÁÄèË¶ΩÂô®‰∏çÊîØÊè¥ÂΩ±ÁâáÊí≠Êîæ
                  </video>
                </div>
              )}

              <div className="grid grid-cols-2 gap-x-6 gap-y-3 text-sm">
                <div>
                  <strong>ÂàÜÈ°ûÔºö</strong> {selectedCourse.category_name || '‚Äî'}
                </div>
                <div>
                  <strong>Ë¨õÂ∏´Ôºö</strong> {selectedCourse.teacher_name || '‚Äî'}
                </div>
                <div>
                  <strong>ÂîÆÂÉπÔºö</strong> NT${' '}
                  {selectedCourse.discount?.toLocaleString?.() ?? '‚Äî'}
                </div>
                <div>
                  <strong>ÂéüÂÉπÔºö</strong> NT${' '}
                  {selectedCourse.price?.toLocaleString?.() ?? '‚Äî'}
                </div>
                <div>
                  <strong>Ë™≤Á®ãÁ´†ÁØÄÔºö</strong>{' '}
                  {selectedCourse.course_chapter || '‚Äî'}
                </div>
                <div>
                  <strong>Ë™≤Á®ãÊôÇÈï∑Ôºö</strong>{' '}
                  {selectedCourse.video_length || '‚Äî'}
                </div>
                <div>
                  <strong>Â≠∏Áîü‰∫∫Êï∏Ôºö</strong>{' '}
                  {selectedCourse.student?.toLocaleString?.() ?? '‚Äî'}
                </div>
                <div>
                  <strong>ÁãÄÊÖãÔºö</strong>{' '}
                  {selectedCourse.status === 1 ? (
                    <Badge className="bg-green-100 text-green-800">
                      ‰∏äÊû∂‰∏≠
                    </Badge>
                  ) : (
                    <Badge className="bg-red-100 text-red-800">
                      Â∑≤‰∏ãÊû∂
                      {selectedCourse.remove &&
                        !isNaN(new Date(selectedCourse.remove)) && (
                          <>
                            {'Ôºà'}
                            {new Date(selectedCourse.remove).toLocaleString(
                              'zh-TW',
                              {
                                year: 'numeric',
                                month: '2-digit',
                                day: '2-digit',
                                hour: '2-digit',
                                minute: '2-digit',
                              }
                            )}
                            {'Ôºâ'}
                          </>
                        )}
                    </Badge>
                  )}
                </div>
                <div>
                  <strong>Âª∫Á´ãÊó•ÊúüÔºö</strong>{' '}
                  {selectedCourse.created?.slice(0, 10) || '‚Äî'}
                </div>
                <div>
                  <strong>Êõ¥Êñ∞Êó•ÊúüÔºö</strong>{' '}
                  {selectedCourse.updated?.slice(0, 10) || 'Êö´ÁÑ°Êõ¥Êñ∞'}
                </div>

                <div className="my-2 col-span-2">
                  <hr className="mb-3" />
                  <div className="my-5">
                    <span className=" font-medium">Ë™≤Á®ãÁ∞°‰ªãÔºö</span>
                    <p className="my-1 text-gray-600 whitespace-pre-wrap">
                      {selectedCourse?.detail || 'ÁÑ°ÊèèËø∞Ë≥áË®ä'}
                    </p>
                  </div>
                  <span className=" font-medium">Ë©≥Á¥∞ÂÖßÂÆπÔºö</span>
                  <div
                    className="prose my-1 text-gray-600"
                    dangerouslySetInnerHTML={{
                      __html: DOMPurify.sanitize(
                        selectedCourse?.content || 'ÁÑ°ÊèèËø∞Ë≥áË®ä'
                      ),
                    }}
                  />
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  )
}
